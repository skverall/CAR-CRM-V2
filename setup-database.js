const { createClient } = require('@supabase/supabase-js')
const fs = require('fs')
const path = require('path')

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Supabase
const SUPABASE_URL = process.env.NEXT_PUBLIC_SUPABASE_URL
const SUPABASE_SERVICE_KEY = process.env.SUPABASE_SERVICE_ROLE_KEY

if (!SUPABASE_URL || !SUPABASE_SERVICE_KEY) {
  console.error('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è NEXT_PUBLIC_SUPABASE_URL –∏ SUPABASE_SERVICE_ROLE_KEY')
  process.exit(1)
}

const supabase = createClient(SUPABASE_URL, SUPABASE_SERVICE_KEY)

async function executeSQLFile(filePath) {
  try {
    console.log(`üìÑ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –º–∏–≥—Ä–∞—Ü–∏—è: ${filePath}`)
    const sql = fs.readFileSync(filePath, 'utf8')
    
    // –†–∞–∑–¥–µ–ª—è–µ–º SQL –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    const commands = sql
      .split(';')
      .map(cmd => cmd.trim())
      .filter(cmd => cmd.length > 0 && !cmd.startsWith('--'))
    
    for (const command of commands) {
      if (command.trim()) {
        const { error } = await supabase.rpc('exec_sql', { sql: command })
        if (error) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: ${command.substring(0, 100)}...`)
          console.error(error)
          throw error
        }
      }
    }
    
    console.log(`‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: ${filePath}`)
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ–∞–π–ª–µ ${filePath}:`, error)
    throw error
  }
}

async function runMigrations() {
  console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π...')
  
  const migrationsDir = path.join(__dirname, 'supabase', 'migrations')
  const migrationFiles = [
    '001_initial_schema.sql',
    '002_triggers_and_functions.sql', 
    '003_rls_policies.sql',
    '004_views_and_analytics.sql'
  ]
  
  try {
    for (const file of migrationFiles) {
      const filePath = path.join(migrationsDir, file)
      if (fs.existsSync(filePath)) {
        await executeSQLFile(filePath)
      } else {
        console.warn(`‚ö†Ô∏è  –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${filePath}`)
      }
    }
    
    console.log('üéâ –í—Å–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!')
    
    // –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç
    console.log('üí± –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç...')
    await addBasicExchangeRates()
    
    console.log('‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞!')
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –º–∏–≥—Ä–∞—Ü–∏–π:', error)
    process.exit(1)
  }
}

async function addBasicExchangeRates() {
  const today = new Date().toISOString().split('T')[0]
  
  const rates = [
    { currency: 'EUR', rate_to_usd: 1.08, date: today },
    { currency: 'GBP', rate_to_usd: 1.25, date: today },
    { currency: 'RUB', rate_to_usd: 0.011, date: today },
    { currency: 'UZS', rate_to_usd: 0.000081, date: today },
    { currency: 'KZT', rate_to_usd: 0.0021, date: today },
  ]
  
  for (const rate of rates) {
    const { error } = await supabase
      .from('exchange_rates')
      .upsert(rate, { onConflict: 'currency,date' })
    
    if (error) {
      console.warn(`‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∫—É—Ä—Å –¥–ª—è ${rate.currency}:`, error.message)
    } else {
      console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –∫—É—Ä—Å ${rate.currency}: ${rate.rate_to_usd}`)
    }
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏
runMigrations()
