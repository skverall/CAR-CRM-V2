const { createClient } = require('@supabase/supabase-js')
const fs = require('fs')
const path = require('path')

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const SUPABASE_URL = 'https://xixjtczhnyggwotkvbhh.supabase.co'
const SUPABASE_SERVICE_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InhpeGp0Y3pobnlnZ3dvdGt2YmhoIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1ODcwNTc1NiwiZXhwIjoyMDc0MjgxNzU2fQ.YYbstDN7VYEG2RW2cNir68B3MZ54AproGN94iedJZGg'

const supabase = createClient(SUPABASE_URL, SUPABASE_SERVICE_KEY, {
  auth: {
    autoRefreshToken: false,
    persistSession: false
  }
})

async function executeSQLFile(filePath) {
  console.log(`üìÑ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è: ${path.basename(filePath)}`)
  
  try {
    const sql = fs.readFileSync(filePath, 'utf8')
    
    // –†–∞–∑–±–∏–≤–∞–µ–º SQL –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    const statements = sql
      .split(';')
      .map(stmt => stmt.trim())
      .filter(stmt => stmt.length > 0 && !stmt.startsWith('--'))
    
    console.log(`   –ù–∞–π–¥–µ–Ω–æ ${statements.length} SQL –∫–æ–º–∞–Ω–¥`)
    
    for (let i = 0; i < statements.length; i++) {
      const statement = statements[i]
      if (statement.trim()) {
        try {
          console.log(`   –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∫–æ–º–∞–Ω–¥–∞ ${i + 1}/${statements.length}...`)
          
          // –í—ã–ø–æ–ª–Ω—è–µ–º —á–µ—Ä–µ–∑ raw SQL
          const { error } = await supabase.rpc('exec', { 
            sql: statement + ';' 
          })
          
          if (error) {
            console.error(`   ‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ ${i + 1}:`, error.message)
            // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
          } else {
            console.log(`   ‚úÖ –ö–æ–º–∞–Ω–¥–∞ ${i + 1} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞`)
          }
        } catch (err) {
          console.error(`   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ –∫–æ–º–∞–Ω–¥–µ ${i + 1}:`, err.message)
        }
      }
    }
    
    console.log(`‚úÖ –§–∞–π–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω: ${path.basename(filePath)}`)
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ ${filePath}:`, error.message)
    throw error
  }
}

async function createExecFunction() {
  console.log('üîß –°–æ–∑–¥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é exec –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è SQL...')
  
  const createFunctionSQL = `
    CREATE OR REPLACE FUNCTION exec(sql text)
    RETURNS void
    LANGUAGE plpgsql
    SECURITY DEFINER
    AS $$
    BEGIN
      EXECUTE sql;
    END;
    $$;
  `
  
  try {
    const { error } = await supabase.rpc('exec', { sql: createFunctionSQL })
    if (error) {
      console.log('‚ö†Ô∏è  –§—É–Ω–∫—Ü–∏—è exec —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω–∞')
    } else {
      console.log('‚úÖ –§—É–Ω–∫—Ü–∏—è exec —Å–æ–∑–¥–∞–Ω–∞')
    }
  } catch (err) {
    console.log('‚ö†Ô∏è  –ë—É–¥–µ–º –≤—ã–ø–æ–ª–Ω—è—Ç—å SQL –Ω–∞–ø—Ä—è–º—É—é')
  }
}

async function runMigrations() {
  console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö Supabase...')
  console.log(`üì° URL: ${SUPABASE_URL}`)
  
  try {
    // –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é exec
    await createExecFunction()
    
    const migrationsDir = path.join(__dirname, 'supabase', 'migrations')
    const files = [
      '001_initial_schema.sql',
      '002_triggers_and_functions.sql',
      '003_rls_policies.sql',
      '004_views_and_analytics.sql'
    ]

    for (const file of files) {
      const filePath = path.join(migrationsDir, file)
      if (fs.existsSync(filePath)) {
        await executeSQLFile(filePath)
        console.log('‚è≥ –ü–∞—É–∑–∞ 2 —Å–µ–∫—É–Ω–¥—ã...')
        await new Promise(resolve => setTimeout(resolve, 2000))
      } else {
        console.warn(`‚ö†Ô∏è  –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${file}`)
      }
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    console.log('üí± –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç...')
    await addExchangeRates()

    console.log('üéâ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!')
    console.log('üîó –û—Ç–∫—Ä–æ–π—Ç–µ –≤–∞—à –ø—Ä–æ–µ–∫—Ç: https://xixjtczhnyggwotkvbhh.supabase.co')
    console.log('üìä –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–∞–±–ª–∏—Ü—ã –≤ Table Editor')
    
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏:', error)
    process.exit(1)
  }
}

async function addExchangeRates() {
  const today = new Date().toISOString().split('T')[0]
  
  const rates = [
    { currency: 'EUR', rate_to_usd: 1.08, date: today },
    { currency: 'GBP', rate_to_usd: 1.25, date: today },
    { currency: 'RUB', rate_to_usd: 0.011, date: today },
    { currency: 'UZS', rate_to_usd: 0.000081, date: today },
    { currency: 'KZT', rate_to_usd: 0.0021, date: today }
  ]
  
  for (const rate of rates) {
    try {
      const { error } = await supabase
        .from('exchange_rates')
        .upsert(rate, { onConflict: 'currency,date' })
      
      if (error) {
        console.warn(`‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∫—É—Ä—Å ${rate.currency}:`, error.message)
      } else {
        console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –∫—É—Ä—Å ${rate.currency}: ${rate.rate_to_usd}`)
      }
    } catch (err) {
      console.warn(`‚ö†Ô∏è  –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫—É—Ä—Å–∞ ${rate.currency}:`, err.message)
    }
  }
}

// –ó–∞–ø—É—Å–∫
runMigrations().catch(console.error)
