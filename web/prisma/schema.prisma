generator client {
  provider = "prisma-client-js"
}


datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

enum UserRole {
  OWNER
  INVESTOR
  ASSISTANT
  VIEWER
}

enum CarStatus {
  IN_STOCK
  REPAIRING
  LISTED
  SOLD
  ARCHIVED
}

enum ExpenseType {
  FUEL
  REPAIR
  DOCS
  SHIPPING
  CUSTOMS
  INSURANCE
  LISTING
  TRANSPORT
  OTHER
}

enum ExpensePaidFrom {
  INVESTOR_FUNDS
  BUSINESS_FUNDS
  MY_PERSONAL
}

enum CapitalAccountType {
  INVESTOR
  BUSINESS
  OWNER
  ASSISTANT
}

enum CapitalTxnReason {
  BUY_CAR
  EXPENSE_CAR
  EXPENSE_GENERAL
  INCOME_SALE
  PAYOUT_OWNER
  PAYOUT_ASSISTANT
  PAYOUT_INVESTOR
  DEPOSIT_INVESTOR
  WITHDRAW_OWNER
  ADJUST
  OTHER
}

model User {
  id             String    @id @default(cuid())
  email          String    @unique
  emailVerified  DateTime?
  name           String?
  role           UserRole  @default(OWNER)
  image          String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  accounts       Account[]
  sessions       Session[]
  capitalAccounts CapitalAccount[]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Car {
  id           String     @id @default(cuid())
  vin          String     @unique
  make         String
  model        String
  year         Int
  buyDate      DateTime
  buyPrice     Decimal    
  buyCurrency  String     
  buyRate      Decimal    
  source       String?
  status       CarStatus  @default(IN_STOCK)
  notes        String?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  expenses     Expense[]
  incomes      Income[]
  capitalTxns  CapitalTxn[]

  @@index([status])
}

model Expense {
  id             String             @id @default(cuid())
  carId          String?
  type           ExpenseType
  amount         Decimal            
  currency       String             
  fxRateToAed    Decimal            
  date           DateTime
  paidFrom       ExpensePaidFrom
  description    String?
  isPersonal     Boolean            @default(false)
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt

  car            Car?               @relation(fields: [carId], references: [id], onDelete: SetNull)
  capitalTxns    CapitalTxn[]

  @@index([carId])
  @@index([date])
}

model Income {
  id             String    @id @default(cuid())
  carId          String
  amount         Decimal   
  currency       String    
  fxRateToAed    Decimal   
  date           DateTime
  buyerName      String?
  paymentMethod  String?
  description    String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  car            Car       @relation(fields: [carId], references: [id], onDelete: Cascade)
  capitalTxns    CapitalTxn[]

  @@index([carId])
  @@index([date])
}

model CapitalAccount {
  id        String              @id @default(cuid())
  type      CapitalAccountType
  name      String
  userId    String?
  currency  String               @default("AED")
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt

  user      User?               @relation(fields: [userId], references: [id], onDelete: SetNull)
  txns      CapitalTxn[]

  @@unique([type, name])
}

model CapitalTxn {
  id          String            @id @default(cuid())
  accountId   String
  amountAed   Decimal           
  date        DateTime
  reason      CapitalTxnReason
  meta        Json?
  carId       String?
  expenseId   String?
  incomeId    String?
  createdAt   DateTime          @default(now())

  account     CapitalAccount    @relation(fields: [accountId], references: [id], onDelete: Cascade)
  car         Car?               @relation(fields: [carId], references: [id], onDelete: SetNull)
  expense     Expense?           @relation(fields: [expenseId], references: [id], onDelete: SetNull)
  income      Income?            @relation(fields: [incomeId], references: [id], onDelete: SetNull)

  @@index([accountId])
  @@index([carId])
  @@index([expenseId])
  @@index([incomeId])
  @@index([date])
}

model FxRate {
  id       String   @id @default(cuid())
  date     DateTime
  counter  String   
  rate     Decimal  
  createdAt DateTime @default(now())

  @@unique([date, counter])
}

