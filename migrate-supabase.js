const fs = require('fs')
const path = require('path')

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Supabase
const SUPABASE_URL = 'https://xixjtczhnyggwotkvbhh.supabase.co'
const SUPABASE_SERVICE_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InhpeGp0Y3pobnlnZ3dvdGt2YmhoIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1ODcwNTc1NiwiZXhwIjoyMDc0MjgxNzU2fQ.YYbstDN7VYEG2RW2cNir68B3MZ54AproGN94iedJZGg'

async function executeSQL(sql) {
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL —á–µ—Ä–µ–∑ Supabase API
  const response = await fetch(`${SUPABASE_URL}/rest/v1/rpc/exec`, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'Authorization': `Bearer ${SUPABASE_SERVICE_KEY}`,
      'apikey': SUPABASE_SERVICE_KEY,
      'Prefer': 'return=minimal'
    },
    body: JSON.stringify({
      sql: sql.trim()
    })
  })

  if (!response.ok) {
    const error = await response.text()
    console.error(`HTTP ${response.status}: ${error}`)

    // –ü–æ–ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± —á–µ—Ä–µ–∑ SQL Editor API
    return await executeSQLDirect(sql)
  }

  return response.json()
}

async function executeSQLDirect(sql) {
  // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ SQL
  const { createClient } = require('@supabase/supabase-js')
  const supabase = createClient(SUPABASE_URL, SUPABASE_SERVICE_KEY)

  const { data, error } = await supabase.rpc('exec', { sql })
  if (error) throw error
  return data
}

async function runMigration(filePath) {
  console.log(`üìÑ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è: ${path.basename(filePath)}`)
  
  try {
    const sql = fs.readFileSync(filePath, 'utf8')
    await executeSQL(sql)
    console.log(`‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: ${path.basename(filePath)}`)
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –≤ ${path.basename(filePath)}:`, error.message)
    throw error
  }
}

async function main() {
  console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...')
  
  const migrationsDir = path.join(__dirname, 'supabase', 'migrations')
  const files = [
    '001_initial_schema.sql',
    '002_triggers_and_functions.sql',
    '003_rls_policies.sql', 
    '004_views_and_analytics.sql'
  ]

  try {
    for (const file of files) {
      const filePath = path.join(migrationsDir, file)
      if (fs.existsSync(filePath)) {
        await runMigration(filePath)
      } else {
        console.warn(`‚ö†Ô∏è  –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${file}`)
      }
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    console.log('üí± –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç...')
    await addExchangeRates()

    console.log('üéâ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!')
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏:', error)
    process.exit(1)
  }
}

async function addExchangeRates() {
  const today = new Date().toISOString().split('T')[0]
  
  const insertSQL = `
    INSERT INTO exchange_rates (currency, rate_to_usd, date) VALUES
    ('EUR', 1.08, '${today}'),
    ('GBP', 1.25, '${today}'),
    ('RUB', 0.011, '${today}'),
    ('UZS', 0.000081, '${today}'),
    ('KZT', 0.0021, '${today}')
    ON CONFLICT (currency, date) DO UPDATE SET
    rate_to_usd = EXCLUDED.rate_to_usd;
  `
  
  try {
    await executeSQL(insertSQL)
    console.log('‚úÖ –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã')
  } catch (error) {
    console.warn('‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç:', error.message)
  }
}

main()
